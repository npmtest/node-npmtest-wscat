{"/home/travis/build/npmtest/node-npmtest-wscat/test.js":"/* istanbul instrument in package npmtest_wscat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wscat/lib.npmtest_wscat.js":"/* istanbul instrument in package npmtest_wscat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wscat = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wscat = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wscat/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wscat && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wscat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wscat\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wscat.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_wscat.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wscat.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_wscat.__dirname + '/lib.npmtest_wscat.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wscat/node_modules/wscat/bin/wscat":"#!/usr/bin/env node\n\n/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander')\n  , readline = require('readline')\n  , read = require('read')\n  , events = require('events')\n  , WebSocket = require('ws')\n  , util = require('util')\n  , fs = require('fs')\n  , tty = require('tty');\n\n/**\n * InputReader - processes console input.\n */\nfunction Console() {\n  if (!(this instanceof Console)) return new Console();\n\n  this.stdin = process.stdin;\n  this.stdout = process.stdout;\n\n  this.readlineInterface = readline.createInterface(this.stdin, this.stdout);\n\n  var self = this;\n\n  this.readlineInterface.on('line', function line(data) {\n    self.emit('line', data);\n  }).on('close', function close() {\n    self.emit('close');\n  });\n\n  this._resetInput = function() {\n    self.clear();\n  };\n}\n\nutil.inherits(Console, events.EventEmitter);\n\nConsole.Colors = {\n  Red: '\\033[31m',\n  Green: '\\033[32m',\n  Yellow: '\\033[33m',\n  Blue: '\\033[34m',\n  Default: '\\033[39m'\n};\n\nConsole.Types = {\n  Incoming: '< ',\n  Control: '',\n  Error: 'error: ',\n};\n\nConsole.prototype.prompt = function prompt() {\n  this.readlineInterface.prompt();\n};\n\nConsole.prototype.print = function print(type, msg, color) {\n  if (tty.isatty(1)) {\n    this.clear();\n    color = color || Console.Colors.Default;\n    this.stdout.write(color + type + msg + Console.Colors.Default + '\\n');\n    this.prompt();\n  } else if (type === Console.Types.Incoming) {\n    this.stdout.write(msg + '\\n');\n  } else {\n    // is a control message and we're not in a tty... drop it.\n  }\n};\n\nConsole.prototype.clear = function clear() {\n  if (tty.isatty(1)) {\n    this.stdout.write('\\033[2K\\033[E');\n  }\n};\n\nConsole.prototype.pause = function pausing() {\n  this.stdin.on('keypress', this._resetInput);\n};\n\nConsole.prototype.resume = function resume() {\n  this.stdin.removeListener('keypress', this._resetInput);\n};\n\nfunction appender(xs) {\n  xs = xs || [];\n\n  return function (x) {\n    xs.push(x);\n    return xs;\n  };\n}\n\nfunction into(obj, kvals) {\n  kvals.forEach(function (kv) {\n    obj[kv[0]] = kv[1];\n  });\n\n  return obj;\n}\n\nfunction splitOnce(sep, str) { // sep can be either String or RegExp\n  var tokens = str.split(sep);\n  return [tokens[0], str.replace(sep, '').substr(tokens[0].length)];\n}\n\n/**\n * The actual application\n */\nvar version = require('../package.json').version;\n\nprogram\n  .version(version)\n  .usage('[options] (--listen <port> | --connect <url>)')\n  .option('-l, --listen <port>', 'listen on port')\n  .option('-c, --connect <url>', 'connect to a websocket server')\n  .option('-p, --protocol <version>', 'optional protocol version')\n  .option('-o, --origin <origin>', 'optional origin')\n  .option('--host <host>', 'optional host')\n  .option('-s, --subprotocol <protocol>', 'optional subprotocol')\n  .option('-n, --no-check', 'Do not check for unauthorized certificates')\n  .option('-H, --header <header:value>', 'Set an HTTP header. Repeat to set multiple. (--connect only)', appender(), [])\n  .option('--auth <username:password>', 'Add basic HTTP authentication header. (--connect only)')\n  .option('--ca <ca>', 'Specify a Certificate Authority (--connect only)')\n  .option('--cert <cert>', 'Specify a Client SSL Certificate (--connect only)')\n  .option('--key <key>', 'Specify a Client SSL Certificate\\'s key (--connect only)')\n  .option('--passphrase [passphrase]', 'Specify a Client SSL Certificate Key\\'s passphrase (--connect only). If you don\\'t provide a value, it will be prompted for.')\n  .parse(process.argv);\n\nif (program.listen && program.connect) {\n  console.error('\\033[33merror: use either --listen or --connect\\033[39m');\n  process.exit(-1);\n} else if (program.listen) {\n  var wsConsole = new Console();\n  wsConsole.pause();\n\n  var ws = null;\n  var wss = new WebSocket.Server({ port: program.listen }, function listening() {\n    wsConsole.print(Console.Types.Control, 'listening on port ' + program.listen + ' (press CTRL+C to quit)', Console.Colors.Green);\n    wsConsole.clear();\n  });\n\n  wsConsole.on('close', function close() {\n    if (ws) ws.close();\n    process.exit(0);\n  });\n\n  wsConsole.on('line', function line(data) {\n    if (ws) {\n      ws.send(data);\n      wsConsole.prompt();\n    }\n  });\n\n  wss.on('connection', function(newClient) {\n    if (ws) return newClient.terminate();\n\n    ws = newClient;\n    wsConsole.resume();\n    wsConsole.prompt();\n    wsConsole.print(Console.Types.Control, 'client connected', Console.Colors.Green);\n\n    ws.on('close', function close() {\n      wsConsole.print(Console.Types.Control, 'disconnected', Console.Colors.Green);\n      wsConsole.clear();\n      wsConsole.pause();\n      ws = null;\n    }).on('error', function error(code, description) {\n      wsConsole.print(Console.Types.Error, code + (description ? ' ' + description : ''), Console.Colors.Yellow);\n    }).on('message', function message(data, flags) {\n      wsConsole.print(Console.Types.Incoming, data, Console.Colors.Blue);\n    });\n  }).on('error', function servererrror(error) {\n    wsConsole.print(Console.Types.Error, error.message, Console.Colors.Yellow);\n    process.exit(-1);\n  });\n} else if (program.connect) {\n  var options = {};\n  var cont = function () {\n    var wsConsole = new Console();\n\n    if (program.protocol) options.protocolVersion = +program.protocol;\n    if (program.origin) options.origin = program.origin;\n    if (program.subprotocol) options.protocol = program.subprotocol;\n    if (program.host) options.host = program.host;\n    if (!program.check) options.rejectUnauthorized = program.check;\n    if (program.ca) options.ca = fs.readFileSync(program.ca);\n    if (program.cert) options.cert = fs.readFileSync(program.cert);\n    if (program.key) options.key = fs.readFileSync(program.key);\n\n    var headers = into({}, (program.header || []).map(function split(s) {\n      return splitOnce(':', s);\n    }));\n\n    if (program.auth) {\n      headers.Authorization = 'Basic '+ new Buffer(program.auth).toString('base64');\n    }\n\n    var connectUrl = program.connect;\n    if (!connectUrl.match(/\\w+:\\/\\/.*$/i)) {\n      connectUrl = 'ws://' + connectUrl;\n    }\n\n    options.headers = headers;\n    var ws = new WebSocket(connectUrl, options);\n\n    ws.on('open', function open() {\n      wsConsole.print(Console.Types.Control, 'connected (press CTRL+C to quit)', Console.Colors.Green);\n      wsConsole.on('line', function line(data) {\n        ws.send(data);\n        wsConsole.prompt();\n      });\n    }).on('close', function close() {\n      wsConsole.print(Console.Types.Control, 'disconnected', Console.Colors.Green);\n      wsConsole.clear();\n      process.exit();\n    }).on('error', function error(code, description) {\n      wsConsole.print(Console.Types.Error, code + (description ? ' ' + description : ''), Console.Colors.Yellow);\n      process.exit(-1);\n    }).on('message', function message(data, flags) {\n      wsConsole.print(Console.Types.Incoming, data, Console.Colors.Blue);\n    });\n\n    wsConsole.on('close', function close() {\n      ws.close();\n      process.exit();\n    });\n  };\n  if (program.passphrase === true) {\n    var readOptions = {\n      prompt: 'Passphrase: ',\n      silent: true,\n      replace: '*'\n    };\n    read(readOptions, function(err, passphrase) {\n      options.passphrase = passphrase;\n      cont();\n    });\n  } else if (typeof program.passphrase === 'string') {\n    options.passphrase = program.passphrase;\n    cont();\n  } else {\n    cont();\n  }\n} else {\n  program.help();\n}\n"}